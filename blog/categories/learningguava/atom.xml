<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learningguava | Prashanth Babu]]></title>
  <link href="http://p7h.org/blog/categories/learningguava/atom.xml" rel="self"/>
  <link href="http://p7h.org/"/>
  <updated>2015-01-15T19:08:16+00:00</updated>
  <id>http://p7h.org/</id>
  <author>
    <name><![CDATA[Prashanth Babu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Calibrating time using Stopwatch]]></title>
    <link href="http://p7h.org/blog/2014/01/29/guava-stopwatch/"/>
    <updated>2014-01-29T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/29/guava-stopwatch</id>
    <content type="html"><![CDATA[<div class="post">
<div style="font-size: 15px; white-space: normal;"><span style="font-family: Roboto;">Many of our day-to-day applications would need calibrating time taken between 2 points. In Java world we either depend on </span><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()" target="_blank"><span style="font-family: Courier New, Courier, monospace;">System.currentTimeMillis()</span></a><span style="font-family: Roboto;"> or </span><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()" target="_blank"><span style="font-family: Courier New, Courier, monospace;">System.nanoTime()</span></a><span style="font-family: Roboto;">. But the pain here is, we have to do the required computations of getting to a proper granularity to understand the time taken.Would n&#8217;t it be great it to have such an utility class which will give the required information in the granularity we need with minimum amount of boilerplate code?  </span><br /><div style="font-family: Roboto;"><br /></div><span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html" target="_blank">Stopwatch</a> </span><span style="font-family: Roboto;">is one such small and wonderful utility class in </span><span style="font-family: Courier New, Courier, monospace;">Guava</span><span style="font-family: Roboto;"> which helps in calibrating elapsed time / duration between any 2 points in the logic. The advantage of using </span><span style="font-family: Courier New, Courier, monospace;">Guava</span><span style="font-family: Roboto;">&#8217;s </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> is you can get the elapsed time in any measure i.e. right from nanoseconds to days. This is possible because you can pass an enum argument type of </span><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html" target="_blank"><span style="font-family: Courier New, Courier, monospace;">TimeUnit</span></a><span style="font-family: Roboto;"> class to get the elapsed time in the desired granularity.  </span><!--more--><br /><div style="font-family: Roboto;"><br /></div><span style="font-family: Roboto;">Code snippet for the usage of the </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> class: </span><script src="https://gist.github.com/P7h/8691100.js"></script>  <br /><div style="font-family: Roboto;"><br /></div><span style="font-family: Roboto;">Few caveats for using </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> are you should not start an already started </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;">. One has to check if the </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> is already running by invoking </span><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html#isRunning()" target="_blank"><span style="font-family: Courier New, Courier, monospace;">isRunning()</span></a><span style="font-family: Roboto;"> method. </span><br /><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> documentation says the following on the same: </span><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state. </span></blockquote><div style="font-family: Roboto;"><br /></div><span style="font-family: Roboto;">Also, once I got burned down by </span><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.2.1/org/apache/commons/lang3/time/StopWatch.html" target="_blank"><span style="font-family: Courier New, Courier, monospace;">StopWatch</span></a><span style="font-family: Roboto;"> class of Apache Commons Lang. As I was working in an IDE on a Maven project, I could not relate to the difference between </span><span style="font-family: Courier New, Courier, monospace;">Stopwatch</span><span style="font-family: Roboto;"> of </span><span style="font-family: Courier New, Courier, monospace;">Guava</span><span style="font-family: Roboto;"> and </span><span style="font-family: Courier New, Courier, monospace;">StopWatch</span><span style="font-family: Roboto;"> of Commons Lang as the class got auto imported into the code and then spent some 20 minutes trying to check my classpath, IDE setup, etc. Yes how stupid of me, right? So, please be careful in choosing the correct class. </span></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Load properties file using Guava]]></title>
    <link href="http://p7h.org/blog/2014/01/26/load-properties-file-using-guava/"/>
    <updated>2014-01-26T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/26/load-properties-file-using-guava</id>
    <content type="html"><![CDATA[<p>Guava code snippet for loading a properties file from classpath.<br />
<!--more-->
<script src="https://gist.github.com/P7h/8635204.js"></script> <br />
For more info, please check <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Resources.html" target="_blank">Resources</a> class of Guava.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Google Guava blog series]]></title>
    <link href="http://p7h.org/blog/2013/11/27/google-guava-posts/"/>
    <updated>2013-11-27T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2013/11/27/google-guava-posts</id>
    <content type="html"><![CDATA[<div class="post">
<span style="font-family: Roboto; font-size: 15px;">â€‹I have been a huge fan of </span><a href="https://code.google.com/p/guava-libraries/" style="font-family: Roboto; font-size: 15px;" target="_blank">Google Guava</a><span style="font-family: Roboto; font-size: 15px;"> from the time I came across it 3 years back.</span><br /><div style="font-size: 15px; white-space: normal;"><span style="font-family: Roboto;">For starters, </span><span style="font-family: Courier New, Courier, monospace;">Guava</span><span style="font-family: Roboto;"> is a project which contains many Google&#8217;s core libraries like collections, caching, math, primitives, concurrency, networking, common annotations, string processing, I/O, refelction and many others.</span><br /><div style="font-family: Roboto;">It is very well designed API. Guava is designed, implemented and maintained by Google Engineers like <a href="https://plus.google.com/113026104107031516488/about" target="_blank">Kevin Bourrillion</a>&nbsp;and&nbsp;<a href="https://plus.google.com/+KurtAlfredKluever/about" target="_blank">Kurt Alfred Kluever</a>, etc.</div><div style="font-family: Roboto;"><br /></div><span style="font-family: Roboto;">Guava follows almost all the excellent patterns and practices mentioned in <a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683" target="_blank">Effective Java book</a>&nbsp;written by <a href="https://plus.google.com/113200173329286634669/about" target="_blank">Joshua Bloch</a>, who has designed the impeccable Java Collections API while he was at Sun. Later he joined Google. Under his mentor-ship, Google Guava got wings and became a very well designed and effective API, useful for many situations and scenarios with an ever-growing feature list. I ensure I add Guava dependency as the first thing to my Gradle or Maven build script. Guava makes </span><span style="font-family: Courier New, Courier, monospace;">Java</span><span style="font-family: Roboto;"> code a lot more readable, clean, simple and elegant. It utilises the Java generics very well.</span><!--more--><br /><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;">Consider the following example which I tweeted few months back.</div><div class="separator" style="clear: both; font-family: Roboto; text-align: center;"><a href="https://twitter.com/P7h/status/195895898146996224" imageanchor="1" style="margin-left: 1em; margin-right: 1em;" target="_blank"><img alt="Google Guava sample code" border="0" src="http://3.bp.blogspot.com/-aCDnApHuz44/UpZBg-vLbII/AAAAAAAACag/wxy58EaJXMw/s1600/Guava_Sample.png" height="185" title="Google Guava sample code" width="640" /></a></div><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;">Which of the above versions looks fine? Obviously the second option, aint it?</div><div style="font-family: Roboto;">There are many such examples where Guava wins by a margin compared to normal Java code and or other libraries like commons, etc.</div><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;">Guava also helps for [in&nbsp;a way] functional programming too. There are few options which are really helpful there as well. Having said that, Guava creators <a href="https://code.google.com/p/guava-libraries/wiki/FunctionalExplained" target="_blank">implore the developers</a> not to litter code with too much functional programming which might lead to unreadable code.</div><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;">I will start with writing few posts on Google Guava with the tag, &#8220;LearningGuava&#8221;. I have been using Guava extensively in almost every project of mine since few years. This will not only help some one else looking for info or starting on Google Guava, but as well as for me also so that I will remember in future if I need any quick snippet on something specific with Guava usage. That being the motivation, I hope it will be of good experience for you and me as well.</div><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;">This post will have list of all the posts written for Google Guava. This post kinda serves as an Index and quick reference of my Google Guava posts.</div><div style="font-family: Roboto;"><br /></div><div style="font-family: Roboto;"><a href="blog/search/label/LearningGuava" target="_blank">Learning Guava Series</a>:</div><ol style="font-family: Roboto;"><li><a href="http://p7h.org/2014/01/load-properties-file-using-guava.html" target="_blank">Load properties file using Guava</a></li><li><a href="http://p7h.org/2014/01/guava-stopwatch.html" target="_blank">Calibrating time using Stopwatch</a>&nbsp;</li></ol></div></div>
]]></content>
  </entry>
  
</feed>
