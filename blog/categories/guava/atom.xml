<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: guava | Prashanth Babu]]></title>
  <link href="http://p7h.org/blog/categories/guava/atom.xml" rel="self"/>
  <link href="http://p7h.org/"/>
  <updated>2015-01-23T23:57:26+00:00</updated>
  <id>http://p7h.org/</id>
  <author>
    <name><![CDATA[Prashanth Babu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Calibrating time using Stopwatch]]></title>
    <link href="http://p7h.org/blog/2014/01/29/guava-stopwatch/"/>
    <updated>2014-01-29T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/29/guava-stopwatch</id>
    <content type="html"><![CDATA[<p>Many of our day-to-day applications would need calibrating time taken between 2 points. In Java world we either depend on <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()" target="_blank"><code>System.currentTimeMillis()</code></a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()" target="_blank"><code>System.nanoTime()</code></a>. But the pain here is, we have to do the required computations of getting to a proper granularity to understand the time taken. Would n’t it be great it to have such an utility class which will give the required information in the granularity we need with minimum amount of boilerplate code?<br /><br /><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html" target="_blank"><code>Stopwatch</code></a> is one such small and wonderful utility class in Guava which helps in calibrating elapsed time / duration between any 2 points in the logic. The advantage of using Guava’s <code>Stopwatch</code> is you can get the elapsed time in any measure i.e. right from nanoseconds to days. This is possible because you can pass an enum argument type of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html" target="_blank"><code>TimeUnit</code></a> class to get the elapsed time in the desired granularity.
<!--more-->
Code snippet for the usage of the <code>Stopwatch</code> class:
<div><script src='https://gist.github.com/8691100.js'></script>
<noscript><pre><code>import java.util.Random;
import java.util.concurrent.TimeUnit;

import com.google.common.base.Stopwatch;

/**
 * Sample example demonstrating usage of Stopwatch API of Google Guava.
 *
 * @see &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html&quot;&gt;Guava Stopwatch&lt;/a&gt;
 */
public final class StopwatchExample {

	public final static void main(final String[] args) {
		//Effective Guava v15.0, this is the one way of creating a Stopwatch instance.
		final Stopwatch stopwatch = Stopwatch.createStarted();

		//Sleep for few random milliseconds.
		try {
			Thread.sleep(new Random().nextInt(1000));
		} catch (final InterruptedException interruptedException) {
			interruptedException.printStackTrace();
		}

		stopwatch.stop(); //optional

		System.out.println(&quot;Elapsed time ==&gt; &quot; + stopwatch);
		System.out.println(&quot;Elapsed time in Nanoseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.NANOSECONDS));
		System.out.println(&quot;Elapsed time in Microseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MICROSECONDS));
		System.out.println(&quot;Elapsed time in Milliseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MILLISECONDS));
		//System.out.println(&quot;Elapsed time in Seconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.SECONDS));
		//System.out.println(&quot;Elapsed time in Minutes ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MINUTES));
	}
}</code></pre></noscript></div>
</p>

<p>Few caveats for using <code>Stopwatch</code> are you should not start an already started <code>Stopwatch</code>. One has to check if the <code>Stopwatch</code> is already running by invoking <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html#isRunning()" target="_blank"><code>isRunning()</code></a> method. <code>Stopwatch</code> documentation says the following on the same:<br />
&lt;blockquote class=&#8221;tr_bq&#8221; style=&#8221;background-color: white; box-sizing: border-box; color: #303030; font-size: 14px; line-height: 24px; margin-bottom: 15px;&#8221;&gt;Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.&lt;/blockquote&gt;
Also, once I got burned down by <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.2.1/org/apache/commons/lang3/time/StopWatch.html" target="_blank"><code>StopWatch</code></a> class of Apache Commons Lang. As I was working in an IDE on a Maven project, I could not quickly relate to the difference between <code>Stopwatch</code> of Guava and <code>StopWatch</code> of Apache Commons Lang, as the class got auto imported into the code and then spent some good 20 minutes trying to check my classpath, IDE setup, etc. Yes very silly mistake. So, please be careful in choosing the correct class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Load properties file using Guava]]></title>
    <link href="http://p7h.org/blog/2014/01/26/load-properties-file-using-guava/"/>
    <updated>2014-01-26T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/26/load-properties-file-using-guava</id>
    <content type="html"><![CDATA[<p>Guava code snippet for loading a properties file from classpath.<br />
<!--more-->
<div><script src='https://gist.github.com/8635204.js'></script>
<noscript><pre><code>import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;

import com.google.common.io.ByteSource;
import com.google.common.io.Resources;

/**
 * Reads a properties file and print all the key value pairs to the console.
 * Note: Writing to console is just for convenience here.
 */
public final class ReadPropertiesWithGuava {

	public final static void main(final String[] args) {
		final URL url = Resources.getResource(&quot;spring-config.properties&quot;);
		final ByteSource byteSource = Resources.asByteSource(url);
		final Properties properties = new Properties();
		InputStream inputStream = null;
		try {
			inputStream = byteSource.openBufferedStream();
			properties.load(inputStream);
			properties.list(System.out);
		} catch (final IOException ioException) {
			ioException.printStackTrace();
		} finally {
			if (inputStream != null) {
				try {
					inputStream.close();
				} catch (final IOException ioException) {
					ioException.printStackTrace();
				}
			}
		}
	}
}</code></pre></noscript></div>
</p>

<p>For more info, please check <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Resources.html" target="_blank">Resources</a> class of Guava.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Google Guava blog series]]></title>
    <link href="http://p7h.org/blog/2013/11/27/google-guava-posts/"/>
    <updated>2013-11-27T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2013/11/27/google-guava-posts</id>
    <content type="html"><![CDATA[<p>​I have been a huge fan of <a href="https://code.google.com/p/guava-libraries/" style="font-family: Roboto; font-size: 15px;" target="_blank">Google Guava</a> from the time I came across it 3 years back.<br />For starters, Guava is a project which contains many Google’s core libraries like collections, caching, math, primitives, concurrency, networking, common annotations, string processing, I/O, reflection and many others. It is very well designed API. Guava is designed, implemented and maintained by Google Engineers like <a href="https://plus.google.com/113026104107031516488/about" target="_blank">Kevin Bourrillion</a> and <a href="https://plus.google.com/+KurtAlfredKluever/about" target="_blank">Kurt Alfred Kluever</a>, etc.<br /></p>

<p>Guava follows almost all the excellent patterns and practices mentioned in <a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683" target="_blank">Effective Java book</a> written by <a href="https://plus.google.com/113200173329286634669/about" target="_blank">Joshua Bloch</a>, who has designed the impeccable Java Collections API while he was at Sun. Later he joined Google. Under his mentor-ship, Google Guava got wings and became a very well designed and effective API, useful for many situations and scenarios with an ever-growing feature list. I ensure I add Guava dependency as the first thing to my Gradle or Maven build script. Guava makes <code>Java</code> code a lot more readable, clean, simple and elegant. It utilises the Java generics very well.<!--more--><br />
<br />
Consider the following example which I tweeted few months back.<br />
<a href="https://twitter.com/P7h/status/195895898146996224" imageanchor="1" style="margin-left: 1em; margin-right: 1em;" target="_blank"><img src="/assets/images/Guava_Sample.png" alt="" /></a></p>

<p>Which of the above versions looks fine? Obviously the second option, aint it?
There are many such examples where Guava wins by a margin compared to normal Java code and or other libraries like commons, etc.</p>

<p>Guava also helps for [in a way] functional programming too. There are few options which are really helpful there as well. Having said that, Guava creators <a href="https://code.google.com/p/guava-libraries/wiki/FunctionalExplained" target="_blank">implore the developers</a> not to litter code with too much functional programming which might lead to unreadable code.</p>

<p>I will start with writing few posts on Google Guava with the tag, “LearningGuava”. I have been using Guava extensively in almost every project of mine since few years. This will not only help some one else looking for info or starting on Google Guava, but as well as for me also so that I will remember in future if I need any quick snippet on something specific with Guava usage. That being the motivation, I hope it will be of good experience for you and me as well.</p>

<p>This post will list all the posts written for Google Guava. This post kinda serves as an Index and quick reference of my Google Guava posts.</p>

<p><a href="http://p7h.org/blog/categories/learningguava/" target="_blank">Learning Guava Series</a>:<br />
<a href="http://p7h.org/blog/2014/01/26/load-properties-file-using-guava/" target="_blank">Load properties file using Guava</a><br />
<a href="http://p7h.org/blog/2014/01/29/guava-stopwatch/" target="_blank">Calibrating time using Stopwatch</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava toString() method generator for IntelliJ IDEA]]></title>
    <link href="http://p7h.org/blog/2012/12/22/guava-tostring-method-gen-for-intellij-idea/"/>
    <updated>2012-12-22T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2012/12/22/guava-tostring-method-gen-for-intellij-idea</id>
    <content type="html"><![CDATA[<div class="post">
<div><div style="font-size: 15px; white-space: normal;"><div style="text-align: justify;"><span style="font-family: Roboto;"><a href="http://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a> comes bundled with </span><span style="font-family: Courier New, Courier, monospace;">toString()</span><span style="font-family: Roboto;"> plugin. If you check the plugins in Settings, you should find </span><span style="font-family: Courier New, Courier, monospace;">GenerateToString</span><span style="font-family: Roboto;"> plugin, which generates </span><span style="font-family: Courier New, Courier, monospace;">toString()</span><span style="font-family: Roboto;"> method with options for String concat, StringBuffer, StringBuilder and ToStringBuilder (of Apache Commons) for generating this method.</span></div></div><div style="text-align: justify;"><br /></div><div style="font-size: 15px; white-space: normal;"><div style="text-align: justify;"><span style="font-family: Roboto;"><a href="http://code.google.com/p/guava-libraries/" target="_blank">Google Guava</a> has even better helper method for generating </span><span style="font-family: Courier New, Courier, monospace;">toString()</span><span style="font-family: Roboto;"> method&nbsp;for a JavaBean or POJO,&nbsp;which is both clutter free and has a very consistent format; in the form of </span><span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#toStringHelper(java.lang.Class)" target="_blank">Objects.toStringHelper(this)</a></span><span style="font-family: Roboto;">. It looks more elegant than any of the above solutions, actually. Also, as I make it a point to use Google Guava in all my projects, I have defined the following template in my </span><span style="font-family: Courier New, Courier, monospace;">toString()</span><span style="font-family: Roboto;"> method generator settings in IntelliJ IDEA.</span></div></div><!--more--><script src="https://gist.github.com/4388630.js"></script><br /><div style="font-size: 15px; white-space: normal;"><div style="text-align: justify;"><span style="font-family: Roboto; font-size: 15px;">Follow the steps mentioned below for adding this template to your IntelliJ IDEA [picked up from <a href="http://stackoverflow.com/a/9445402" target="_blank">SO</a>]:<br /></span></div><ul><li style="text-align: justify;"><span style="font-family: Roboto; font-size: 15px;">Go inside a Java Class in an editor in IntelliJ IDEA</span></li><span style="font-family: Roboto; font-size: 15px;"><li style="text-align: justify;">Hit Alt + Insert to popup the &#8220;Generate&#8221; menu</li><li style="text-align: justify;">Choose toString()</li><li style="text-align: justify;">Click the &#8220;Settings&#8221; button</li><li style="text-align: justify;">Go to the &#8220;Templates&#8221; tab</li><li style="text-align: justify;">Create a new template named &#8220;Guava toString gen&#8221; (or any name you prefer)</li><li style="text-align: justify;">Add the above code to the template</li></span></ul></div><div style="text-align: justify;"><span style="font-family: Roboto; font-size: 15px;">Yes, its that simple!!&nbsp; After configuring the above template, whenever you want to generate a </span><span style="font-family: Courier New, Courier, monospace; font-size: 15px;">toString()</span><span style="font-family: Roboto; font-size: 15px;"> method for a Class, IntelliJ IDEA generates </span><span style="font-family: Courier New, Courier, monospace; font-size: 15px;">toString()</span><span style="font-family: Roboto; font-size: 15px;"> using Guava template you have added just now.</span></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="font-family: Roboto; font-size: 15px;">Now, go ahead and give this a try and also check the other method </span><span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.ToStringHelper.html#omitNullValues()" target="_blank">omitNullValues()</a></span><span style="font-family: Roboto; font-size: 15px;"> which might be useful in some scenarios.</span></div><div style="text-align: justify;"><span style="font-family: Roboto; font-size: 15px;"><br /></span></div><span style="font-family: Roboto; font-size: 15px;"><div style="text-align: justify;"><span style="font-family: Roboto;">Also, as a bonus tip, Guava&#8217;s <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html" target="_blank">Objects</a> class also has 2 awesome helper methods which aide in writing readable&nbsp;</span><span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#equal(java.lang.Object, java.lang.Object)" target="_blank">equals()</a></span><span style="font-family: Roboto;"> and </span><span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#hashCode(java.lang.Object...)" target="_blank">hashcode()</a></span><span style="font-family: Roboto;"> methods. You should try them too.</span></div></span></div></div>
]]></content>
  </entry>
  
</feed>
