<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: idea | Prashanth Babu]]></title>
  <link href="http://p7h.org/blog/categories/idea/atom.xml" rel="self"/>
  <link href="http://p7h.org/"/>
  <updated>2015-01-26T23:16:41+00:00</updated>
  <id>http://p7h.org/</id>
  <author>
    <name><![CDATA[Prashanth Babu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guava toString() method generator for IntelliJ IDEA]]></title>
    <link href="http://p7h.org/blog/2012/12/22/guava-tostring-method-gen-for-intellij-idea/"/>
    <updated>2012-12-22T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2012/12/22/guava-tostring-method-gen-for-intellij-idea</id>
    <content type="html"><![CDATA[<p><a href="http://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a> comes bundled with <code>toString()</code> plugin. If you check the plugins in Settings, you should find GenerateToString plugin, which generates <code>toString()</code> method with options for String concat, StringBuffer, StringBuilder and ToStringBuilder (of Apache Commons) for generating this method.</p>

<p><a href="http://code.google.com/p/guava-libraries/" target="_blank">Google Guava</a> has even better helper method for generating <code>toString()</code> method for a JavaBean or POJO, which is both clutter free and has a very consistent format; in the form of <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#toStringHelper(java.lang.Class)" target="_blank">Objects.toStringHelper(this)</a>. It looks more elegant than any of the above solutions, actually. Also, as I make it a point to use Google Guava in all my projects, I have defined the following template in my <code>toString()</code> method generator settings in IntelliJ IDEA.
<!--more--></p>

<p><div><script src='https://gist.github.com/4388630.js'></script>
<noscript><pre><code>/**
 * Guava API toString() method generator for a JavaBean / POJO.
 * @return String representation of all the attributes of the bean.
 */
public String toString() {
    #set ($autoImportPackages = &quot;com.google.common.base.Objects&quot;)
    return Objects.toStringHelper(this)
    #foreach ($member in $members)
        .add(&quot;$member.name&quot;, $member.accessor)
    #end
        .toString();
}</code></pre></noscript></div>
</p>

<p>Follow the steps mentioned below for adding this template to your IntelliJ IDEA [picked up from <a href="http://stackoverflow.com/a/9445402" target="_blank">SO</a>]:</p>

<ol>
  <li>Go inside a Java Class in an editor in IntelliJ IDEA.</li>
  <li>Hit Alt + Insert to popup the “Generate” menu.</li>
  <li>Choose <code>toString()</code>.</li>
  <li>Click the “Settings” button.</li>
  <li>Go to the “Templates” tab.</li>
  <li>Create a new template named “Guava toString gen” (or any name you prefer).</li>
  <li>Add the above code to the template.</li>
</ol>

<p>Yes, its that simple!!  After configuring the above template, whenever you want to generate a <code>toString()</code> method for a Class, IntelliJ IDEA generates <code>toString()</code> using Guava template you have added just now.</p>

<p>Now, go ahead and give this a try and also check the other method <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.ToStringHelper.html#omitNullValues()" target="_blank">omitNullValues()</a> which might be useful in some scenarios.</p>

<p>Also, as a bonus tip, Guava’s <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html" target="_blank">Objects</a> class also has 2 awesome helper methods which aide in writing readable <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#equal(java.lang.Object, java.lang.Object)" target="_blank">equals()</a> and <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Objects.html#hashCode(java.lang.Object...)" target="_blank">hashcode()</a> methods. You should try them too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JetBrains Mayan Doomsday Special Offers ]]></title>
    <link href="http://p7h.org/blog/2012/12/20/jetbrains-mayan-doomsday-special-offers/"/>
    <updated>2012-12-20T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2012/12/20/jetbrains-mayan-doomsday-special-offers</id>
    <content type="html"><![CDATA[<p>JetBrains has an amazing set of IDEs right from Java to Python to Ruby and so on. They are a bit expensive though. For example, IntelliJ IDEA personal license can be bought for $199. But today, JetBrains is offering a steep discount of 75% on all their products which include <a href="http://www.jetbrains.com/idea" target="_blank">IntelliJ IDEA</a>, <a href="http://www.jetbrains.com/pycharm/" target="_blank">PyCharm</a> and a host of <a href="http://www.jetbrains.com/products.html" target="_blank">other awesome IDEs</a>.<br />
<a href="http://www.jetbrains.com/specials/index.jsp" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="/assets/images/JetBrains_MayanDoomsday_Offer.png" alt="" /></a><br /></p>

<p>It is a limited period offer and to be precise its an offer only for 24 hours on 20<sup>th</sup> December, 2012. So, what are you waiting for? Head over to their website and NOW!!<br /></p>

<p><a href="http://www.jetbrains.com/specials/index.jsp" target="_blank">JetBrains Special Offer</a></p>

<p><em>EDIT: This offer expired on 21st December, 2012.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance Tuning of IntelliJ IDEA startup options]]></title>
    <link href="http://p7h.org/blog/2012/12/10/intellij-idea-tuning-parameters/"/>
    <updated>2012-12-10T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2012/12/10/intellij-idea-tuning-parameters</id>
    <content type="html"><![CDATA[<p><a href="http://www.jetbrains.com/idea/" target="_blank">IntelliJ IDEA</a> is my favorite IDE for all Java development related work. I do moonlight with Eclipse as well from time-to-time, but it is very less and also the sheer speed and power of IDEA pulls me back every time.</p>

<p>I have found the following tuning parameters to be effective for my day-to-day work for fast loading, caching, etc and for the IDE to function smoothly:
<!--more--></p>

<p><div><script src='https://gist.github.com/4388881.js'></script>
<noscript><pre><code>-server
-Xms2048m
-Xmx2048m
-XX:NewSize=512m
-XX:MaxNewSize=512m
-XX:PermSize=512m
-XX:MaxPermSize=512m
-XX:+UseParNewGC
-XX:ParallelGCThreads=4
-XX:MaxTenuringThreshold=1
-XX:SurvivorRatio=8
-XX:+UseCodeCacheFlushing
-XX:+UseConcMarkSweepGC
-XX:+AggressiveOpts
-XX:+CMSClassUnloadingEnabled
-XX:+CMSIncrementalMode
-XX:+CMSIncrementalPacing
-XX:+CMSParallelRemarkEnabled
-XX:CMSInitiatingOccupancyFraction=65
-XX:+CMSScavengeBeforeRemark
-XX:+UseCMSInitiatingOccupancyOnly
-XX:ReservedCodeCacheSize=64m
-XX:-TraceClassUnloading
-ea
-Dsun.io.useCanonCaches=false</code></pre></noscript></div>
</p>

<p>If you are on 64-bit Windows OS, please add the above config in <em>idea64.exe.vmoptions</em> file and if 32-bit, please add these tuning parms to <em>idea.exe.vmoptions</em> present in IDEA_LOCATION/bin folder.<br /></p>

<p>Also just in case if you are not aware, on a 64-bit machine, if you want to launch IntelliJ IDEA in 64-bit mode, you need to launch <em>idea64.exe</em> and not <em>idea.exe</em>. For this, ensure you have <code>IDEA_JDK</code> and <code>IDEA_JDK_64</code> environment variables pointing to your 64-bit Java install folder.<br /></p>

<p>Finally, the above IntelliJ IDEA tuning parameters hold good for IntelliJ IDEA installed on a Linux machine as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA Plugins]]></title>
    <link href="http://p7h.org/blog/2012/12/10/intellij-ide-plugins/"/>
    <updated>2012-12-10T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2012/12/10/intellij-ide-plugins</id>
    <content type="html"><![CDATA[<p>In continuation to my earlier post on <a href="http://p7h.org/2012/12/intellij-idea-tuning-parameters.html" target="_blank">IntelliJ IDEA tuning parameters</a>, here are the plugins I am using currently.
<!--more--></p>

<p><div><script src='https://gist.github.com/4388852.js'></script>
<noscript><pre><code>FindBugs-IDEA -- Static byte code analysis to look for bugs in Java code from within IntelliJ IDEA.
GenerateSerialVersionUID -- Generates serialVersionUID field in the current class.
Hungry Backspace -- Modifies backspace key to hungrily delete whitespace.
Native Neighbourhood -- Shows active file in explorer or opens a command shell in active file's directory.
SmarterEditor -- Actions which reduce unnecessary caret movements.
TabSwitch -- Windows Alt+Tab like interface for all currently opened files.
UpperLowerCapitalize -- To change case to upper, lower, capitalize or invert the case of text.</code></pre></noscript></div>
</p>

<p>Please check back from time to time, I will keep this list up-to-date with all the interesting plugins I come across.</p>

<p>For a complete list of plugins available in IntelliJ IDEA, please check this <a href="http://plugins.intellij.net/" target="_blank">Plugins page on Jetbrains</a>. As of today, there are 865 plugins available for IntelliJ IDEA Ultimate Edition and 819 for IntelliJ IDEA Community Edition.</p>
]]></content>
  </entry>
  
</feed>
