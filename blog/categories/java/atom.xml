<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Prashanth Babu]]></title>
  <link href="http://p7h.org/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://p7h.org/"/>
  <updated>2015-01-18T23:48:40+00:00</updated>
  <id>http://p7h.org/</id>
  <author>
    <name><![CDATA[Prashanth Babu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JDK installation from ppa on Ubuntu]]></title>
    <link href="http://p7h.org/blog/2015/01/14/jdk-installation-ubuntu-ppa/"/>
    <updated>2015-01-14T17:04:15+00:00</updated>
    <id>http://p7h.org/blog/2015/01/14/jdk-installation-ubuntu-ppa</id>
    <content type="html"><![CDATA[<p>Previously I have <a href="/blog/2014/10/18/jdk-download-command-prompt/">written</a> how to install Oracle JDK on any env [Linux or Windows] from the command prompt.</p>

<p>But you can do that without even writing a single line of code or anything just by getting the JDK from the ppa on Ubuntu.
So, here are 3 very simple steps for installation of Oracle JDK on a Ubuntu machine.</p>

<!--more-->
<p>#### Initial setup command
    sudo apt-get install python-software-properties</p>

<h4 id="add-ppa-to-software-sources">Add ppa to software sources</h4>
<pre><code>sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
</code></pre>

<h4 id="for-oracle-jdk-6x">For Oracle JDK 6.x</h4>
<pre><code>sudo apt-get install oracle-java6-installer
</code></pre>

<h4 id="for-oracle-jdk-7x">For Oracle JDK 7.x</h4>
<pre><code>sudo apt-get install oracle-java7-installer
</code></pre>

<h4 id="for-oracle-jdk-8x">For Oracle JDK 8.x</h4>
<pre><code>sudo apt-get install oracle-java8-installer
</code></pre>

<h4 id="configure-the-env">Configure the env</h4>
<ul>
  <li>Add JAVA_HOME env variable.</li>
  <li>Also add JAVA_HOME/bin to PATH env variable.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download Java / JDK / JRE from shell / terminal / command prompt]]></title>
    <link href="http://p7h.org/blog/2014/10/18/jdk-download-command-prompt/"/>
    <updated>2014-10-18T00:00:00+01:00</updated>
    <id>http://p7h.org/blog/2014/10/18/jdk-download-command-prompt</id>
    <content type="html"><![CDATA[<p>Its been really sometime since I blogged anything. Got into too much work both on personal and professional fronts. I will try to be regular henceforth though, hopefully [fingers crossed!!].<br /></p>

<p>Most of my work happens on EC2 and on Linux as our Hadoop env is on EC2. I absolutely adore Linux and shell. And first and foremost thing I have to do - being a Java developer - is download Oracle JDK onto the Linux machines on EC2. And downloading Oracle JDK from Oracle website is difficult due to Oracle’s mandatory license check, which you need to accept before downloading the JDK. With my Linux env being server-only-machines [i.e. without a desktop or GUI], there is no way I could download the JDK directly from Oracle website. So, I came up with this small shell script [extending an <a href="http://stackoverflow.com/a/10959815" target="_blank">answer</a> from Stackoverflow] to download JDK from Oracle website from command prompt.<!--more--><br /></p>

<p>Depending on the OS and platform of the JDK version you intend to download, just modify the array on line#20 in the following script and you can trigger the download on the shell directly.<div><script src='https://gist.github.com/9741922.js?file=jdk_download.sh'></script>
<noscript><pre><code>### Shell script to download Oracle JDK / JRE / Java binaries from Oracle website using terminal / command / shell prompt using wget.
### You can download all the binaries one-shot by just giving the BASE_URL.
### Script might be useful if you need Oracle JDK on Amazon EC2 env.

## Features:-
# 1. Resumes a broken / interrupted [previous] download, if any.
# 2. Renames the file to a proper name with including platform info.
# 3. Downloads the following from Oracle Website with one shell invocation.
#    a. Windows 64 and 32 bit;
#    b. Linux 64 and 32 bit;
#    c. API Docs;
#    d. You can add more to the list of downloads are per your requirement.

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

## JDK version: JDK8u25
BASE_URL=http://download.oracle.com/otn-pub/java/jdk/8u25-b17/jdk-8u25
JDK_VERSION=${BASE_URL: -8}

declare -a PLATFORMS=(&quot;-windows-x64.exe&quot; &quot;-windows-i586.exe&quot; &quot;-linux-x64.tar.gz&quot; &quot;-linux-i586.tar.gz&quot; &quot;-docs-all.zip&quot;)

for platform in &quot;${PLATFORMS[@]}&quot;
do
    wget -c -O &quot;$JDK_VERSION$platform&quot; --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; &quot;${BASE_URL}${platform}&quot;
done

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####

## JDK version: JDK7u71
BASE_URL=http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71
JDK_VERSION=${BASE_URL: -8}

declare -a PLATFORMS=(&quot;-windows-x64.exe&quot; &quot;-windows-i586.exe&quot; &quot;-linux-x64.tar.gz&quot; &quot;-linux-i586.tar.gz&quot; &quot;-docs-all.zip&quot;)

for platform in &quot;${PLATFORMS[@]}&quot;
do
    wget -c -O &quot;$JDK_VERSION$platform&quot; --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; &quot;${BASE_URL}${platform}&quot;
done

##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####</code></pre></noscript></div>

<br />
Hope this script will be helpful for all those who live on and love command prompt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Calibrating time using Stopwatch]]></title>
    <link href="http://p7h.org/blog/2014/01/29/guava-stopwatch/"/>
    <updated>2014-01-29T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/29/guava-stopwatch</id>
    <content type="html"><![CDATA[<p>Many of our day-to-day applications would need calibrating time taken between 2 points. In Java world we either depend on <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()" target="_blank"><code>System.currentTimeMillis()</code></a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()" target="_blank"><code>System.nanoTime()</code></a>. But the pain here is, we have to do the required computations of getting to a proper granularity to understand the time taken. Would n’t it be great it to have such an utility class which will give the required information in the granularity we need with minimum amount of boilerplate code?<br /><br /><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html" target="_blank"><code>Stopwatch</code></a> is one such small and wonderful utility class in Guava which helps in calibrating elapsed time / duration between any 2 points in the logic. The advantage of using Guava’s <code>Stopwatch</code> is you can get the elapsed time in any measure i.e. right from nanoseconds to days. This is possible because you can pass an enum argument type of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html" target="_blank"><code>TimeUnit</code></a> class to get the elapsed time in the desired granularity.
<!--more-->
Code snippet for the usage of the <code>Stopwatch</code> class:
<div><script src='https://gist.github.com/8691100.js'></script>
<noscript><pre><code>import java.util.Random;
import java.util.concurrent.TimeUnit;

import com.google.common.base.Stopwatch;

/**
 * Sample example demonstrating usage of Stopwatch API of Google Guava.
 *
 * @see &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html&quot;&gt;Guava Stopwatch&lt;/a&gt;
 */
public final class StopwatchExample {

	public final static void main(final String[] args) {
		//Effective Guava v15.0, this is the one way of creating a Stopwatch instance.
		final Stopwatch stopwatch = Stopwatch.createStarted();

		//Sleep for few random milliseconds.
		try {
			Thread.sleep(new Random().nextInt(1000));
		} catch (final InterruptedException interruptedException) {
			interruptedException.printStackTrace();
		}

		stopwatch.stop(); //optional

		System.out.println(&quot;Elapsed time ==&gt; &quot; + stopwatch);
		System.out.println(&quot;Elapsed time in Nanoseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.NANOSECONDS));
		System.out.println(&quot;Elapsed time in Microseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MICROSECONDS));
		System.out.println(&quot;Elapsed time in Milliseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MILLISECONDS));
		//System.out.println(&quot;Elapsed time in Seconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.SECONDS));
		//System.out.println(&quot;Elapsed time in Minutes ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MINUTES));
	}
}</code></pre></noscript></div>
</p>

<p>Few caveats for using <code>Stopwatch</code> are you should not start an already started <code>Stopwatch</code>. One has to check if the <code>Stopwatch</code> is already running by invoking <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html#isRunning()" target="_blank"><code>isRunning()</code></a> method. <code>Stopwatch</code> documentation says the following on the same:<br /></p>

<blockquote class="tr_bq" style="background-color: white; box-sizing: border-box; color: #303030; font-size: 14px; line-height: 24px; margin-bottom: 15px;">Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.</blockquote>
<p>Also, once I got burned down by <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.2.1/org/apache/commons/lang3/time/StopWatch.html" target="_blank"><code>StopWatch</code></a> class of Apache Commons Lang. As I was working in an IDE on a Maven project, I could not quickly relate to the difference between <code>Stopwatch</code> of Guava and <code>StopWatch</code> of Apache Commons Lang, as the class got auto imported into the code and then spent some good 20 minutes trying to check my classpath, IDE setup, etc. Yes very silly mistake. So, please be careful in choosing the correct class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Load properties file using Guava]]></title>
    <link href="http://p7h.org/blog/2014/01/26/load-properties-file-using-guava/"/>
    <updated>2014-01-26T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/26/load-properties-file-using-guava</id>
    <content type="html"><![CDATA[<p>Guava code snippet for loading a properties file from classpath.<br />
<!--more-->
<script src="https://gist.github.com/P7h/8635204.js"></script> <br />
For more info, please check <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Resources.html" target="_blank">Resources</a> class of Guava.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Google Guava blog series]]></title>
    <link href="http://p7h.org/blog/2013/11/27/google-guava-posts/"/>
    <updated>2013-11-27T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2013/11/27/google-guava-posts</id>
    <content type="html"><![CDATA[<p>​I have been a huge fan of <a href="https://code.google.com/p/guava-libraries/" style="font-family: Roboto; font-size: 15px;" target="_blank">Google Guava</a> from the time I came across it 3 years back.<br />For starters, Guava is a project which contains many Google’s core libraries like collections, caching, math, primitives, concurrency, networking, common annotations, string processing, I/O, reflection and many others. It is very well designed API. Guava is designed, implemented and maintained by Google Engineers like <a href="https://plus.google.com/113026104107031516488/about" target="_blank">Kevin Bourrillion</a> and <a href="https://plus.google.com/+KurtAlfredKluever/about" target="_blank">Kurt Alfred Kluever</a>, etc.<br /></p>

<p>Guava follows almost all the excellent patterns and practices mentioned in <a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683" target="_blank">Effective Java book</a> written by <a href="https://plus.google.com/113200173329286634669/about" target="_blank">Joshua Bloch</a>, who has designed the impeccable Java Collections API while he was at Sun. Later he joined Google. Under his mentor-ship, Google Guava got wings and became a very well designed and effective API, useful for many situations and scenarios with an ever-growing feature list. I ensure I add Guava dependency as the first thing to my Gradle or Maven build script. Guava makes <code>Java</code> code a lot more readable, clean, simple and elegant. It utilises the Java generics very well.<!--more--><br />
<br />
Consider the following example which I tweeted few months back.<br />
<a href="https://twitter.com/P7h/status/195895898146996224" imageanchor="1" style="margin-left: 1em; margin-right: 1em;" target="_blank"><img alt="Google Guava sample code" border="0" src="http://3.bp.blogspot.com/-aCDnApHuz44/UpZBg-vLbII/AAAAAAAACag/wxy58EaJXMw/s1600/Guava_Sample.png" height="185" title="Google Guava sample code" width="640" /></a></p>

<p>Which of the above versions looks fine? Obviously the second option, aint it?
There are many such examples where Guava wins by a margin compared to normal Java code and or other libraries like commons, etc.</p>

<p>Guava also helps for [in a way] functional programming too. There are few options which are really helpful there as well. Having said that, Guava creators <a href="https://code.google.com/p/guava-libraries/wiki/FunctionalExplained" target="_blank">implore the developers</a> not to litter code with too much functional programming which might lead to unreadable code.</p>

<p>I will start with writing few posts on Google Guava with the tag, “LearningGuava”. I have been using Guava extensively in almost every project of mine since few years. This will not only help some one else looking for info or starting on Google Guava, but as well as for me also so that I will remember in future if I need any quick snippet on something specific with Guava usage. That being the motivation, I hope it will be of good experience for you and me as well.</p>

<p>This post will list all the posts written for Google Guava. This post kinda serves as an Index and quick reference of my Google Guava posts.</p>

<p><a href="http://p7h.org/blog/categories/learningguava/" target="_blank">Learning Guava Series</a>:<br />
<a href="http://p7h.org/blog/2014/01/26/load-properties-file-using-guava/" target="_blank">Load properties file using Guava</a><br />
<a href="http://p7h.org/blog/2014/01/29/guava-stopwatch/" target="_blank">Calibrating time using Stopwatch</a></p>
]]></content>
  </entry>
  
</feed>
