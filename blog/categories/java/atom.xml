<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Prashanth Babu]]></title>
  <link href="http://p7h.org/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://p7h.org/"/>
  <updated>2016-05-11T15:30:20+01:00</updated>
  <id>http://p7h.org/</id>
  <author>
    <name><![CDATA[Prashanth Babu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8 Date and Time: Parsing and formatting]]></title>
    <link href="http://p7h.org/blog/2016/05/09/java-date-time-parse-format/"/>
    <updated>2016-05-09T23:26:10+01:00</updated>
    <id>http://p7h.org/blog/2016/05/09/java-date-time-parse-format</id>
    <content type="html"><![CDATA[<p>With Java v8, we have new API for Date and Time, which looks pretty elegant and also is immutable and hence thread-safe. </p>

<p>Please check <code>java.time</code> <a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">package summary</a> added in Java v8 for detailed info of all the classes present in this package. Also checking official <a href="https://docs.oracle.com/javase/tutorial/datetime/TOC.html">Java Tutorial Trail for Data Time</a> really helps understand the API better.</p>

<p>This API is based on / inspired by the wonderful <a href="http://www.joda.org/joda-time/">Joda-Time</a>, which was the de facto standard date and time library for Java prior to Java SE 8. </p>

<p>In this blogpost, we will discuss how to parse and format dates with this new API.
<!--more-->
At a new very high-level, there are 4 classes related to handling dates in <code>java.time</code> package.</p>

<ul>
  <li>
    <p><code>LocalDate</code> holds just the date and does not store or represent either time or time-zone. Example: <code>2016-05-09</code></p>
  </li>
  <li>
    <p><code>LocalTime</code> holds just the time and does not store or represent either date or time-zone. Example: <code>22:04:43.658</code></p>
  </li>
  <li>
    <p><code>LocalDateTime</code> is a combination of both <code>LocalDate</code> and <code>LocalTime</code> which holds the date and time; but <em>does not</em> hold the time-zone information. Example: <code>2016-05-09T22:06:25.599</code></p>
  </li>
  <li>
    <p><code>ZonedDateTime</code> is <code>LocalDateTime</code> and also includes the time-zone information too. Example: <code>2016-05-09T22:09:34.711+01:00[Europe/London]</code></p>
  </li>
</ul>

<p>And for formatting, we will use <code>DateTimeFormatter</code> of <code>java.time.format</code> package. Please refer the <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html">Java API docs</a> for more info on this class. There are a number of predefined formatters which are needed for parsing and formatting.</p>

<p><em>For brevity, programming language syntax chosen for examples here is <code>Scala</code></em>.</p>

<h3 id="parsing-a-date">Parsing a date</h3>
<p>If we need to parse a date in the format: <code>Mon May 09 22:20:58 +0100 2016</code> and make it a Java object, we can do the following:</p>

<p>&#8220;` scala Parse a date String to a Java Object
    import java.time.{LocalDateTime, ZonedDateTime}
    import java.time.format.DateTimeFormatter</p>

<pre><code>val date = "Mon May 09 22:20:58 +0100 2016"

val formatter = DateTimeFormatter.ofPattern("EE MMM dd HH:mm:ss ZZ yyyy")
val parseDate = LocalDateTime.parse(date, formatter)
  // parseDate: java.time.LocalDateTime = 2016-05-09T22:20:58
val parseDateTZ = ZonedDateTime.parse(date, formatter)
  // parseDateTZ:  java.time.ZonedDateTime = 2016-05-09T22:20:58+01:00 ```
</code></pre>

<h3 id="formatting-a-date-with-time-zone-info">Formatting a date with time-zone info</h3>
<p>If the time-zone is present in the format string, we can not use <code>LocalDateTime</code> and should instead use <code>ZonedDateTime</code>.
And when we have a Java Date object and would like to format it to a String which includes time-zone specific info also, we can do the following:</p>

<p>&#8220;` scala Parse a date with TZ to a String
    import java.time.ZonedDateTime
    import java.time.format.DateTimeFormatter</p>

<pre><code>val formatter = DateTimeFormatter.ofPattern("EE MMM dd HH:mm:ss.SSS ZZ yyyy")
val now = ZonedDateTime.now()
  // now: java.time.ZonedDateTime = 2016-05-09T22:38:38.289+01:00[Europe/London]
val formattedDate1 = formatter.format(now)
  // formattedDate1: String = Mon May 09 22:38:38.289 +0100 2016
val formattedDate2 = now.format(formatter)
  // formattedDate2: String = Mon May 09 22:38:38.289 +0100 2016 ```
</code></pre>

<h3 id="formatting-a-date-without-time-zone-info">Formatting a date without time-zone info</h3>
<p>If we don’t need time-zone specific information for formatting a date, we can use <code>LocalDateTime</code> class.</p>

<p>&#8220;` scala Parse a date without TZ to a String
    import java.time.LocalDateTime
    import java.time.format.DateTimeFormatter</p>

<pre><code>val formatter = DateTimeFormatter.ofPattern("EE MMM dd HH:mm:ss.SSS yyyy")
val now = LocalDateTime.now()
  // now: java.time.LocalDateTime = 2016-05-09T22:42:15.125
val formattedDate1 = formatter.format(now)
  // formattedDate1: String = Mon May 09 22:42:15.125 2016
val formattedDate2 = now.format(formatter)
  // formattedDate2: String = Mon May 09 22:42:15.125 2016 ```
</code></pre>

<p>Hope this post gave a quick understanding of Java8 Date and Time parsing and formatting.
Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Random numbers in a Range in Java]]></title>
    <link href="http://p7h.org/blog/2016/01/22/generating-random-numbers-in-a-range/"/>
    <updated>2016-01-22T01:22:05+00:00</updated>
    <id>http://p7h.org/blog/2016/01/22/generating-random-numbers-in-a-range</id>
    <content type="html"><![CDATA[<p>Generating random numbers is usually a pain.<br />
And more so when you have generate random numbers in a given range in Java. You have to consider a lot of parameters.</p>

<h3 id="java--v8">Java (&lt; v8)</h3>
<p>I would write something quick and dirty like the following.<br />
For brevity, programming language syntax chosen is Scala, but you get the point.</p>

<pre><code>val random = new java.util.Random
val (size, min, max) = (10, 20, 50)
for(i &lt;- 0 until size) yield (min + random.nextDouble() * (max-min)).toInt

// Output of the above code in Scala REPL
res1: scala.collection.immutable.IndexedSeq[Int] = Vector(46, 38, 22, 21, 43, 35, 49, 47, 23, 41)
</code></pre>

<!--more-->

<h3 id="python">Python</h3>
<p>Python has core library support for this feature. So, we can do the following:</p>

<pre><code>from random import randint
[randint(10, 50) for p in range(10)]

## Output of the above code in Python REPL
[43, 33, 37, 20, 41, 11, 18, 25, 12, 26]
</code></pre>

<p>But wont it be cool if we had such an utility in the JDK itself as in Python to generate random numbers? So, this is where JDK v8 comes to help.</p>

<h3 id="java-v8x-new-methods">Java v8.x new methods</h3>
<p>JDK v8 added the following nifty methods to <code>java.util.Random</code> class which help us in accomplishing this.</p>

<ol>
  <li>Generate an unlimited number of random values »» <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints--">public IntStream ints()</a></li>
  <li>Generate an unlimited number of random values within a range »» <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-int-int-">public IntStream ints (int randomNumberOrigin, int randomNumberBound)</a></li>
  <li>Generate ‘n’ random integers »» <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-long-">public IntStream ints(long streamSize)</a></li>
  <li>Generate ‘n’ random integers in a given range »» <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-long-int-int-">public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound)</a></li>
</ol>

<p>Also, similar utility methods are present for <code>long</code> and <code>double</code> datatypes respectively.<br /></p>

<p>Please take a note that each of these methods are actually returning an <code>java.util.stream.IntStream</code> and not an <code>Array</code>.<br />
And another point to note here is: <code>[randomNumberOrigin, randomNumberBound)</code> i.e. random numbers generated will be <code>randomNumberOrigin ≤ x &lt; randomNumberBound</code>.</p>

<h3 id="code-with-java-v8">Code with Java v8</h3>
<p>So, with this background we can modify our initial code to utilize the new(ish) Java API directly:</p>

<pre><code>val random = new java.util.Random
val (size, min, max) = (10, 20, 50)
random.ints(size, min, max).toArray  

// Output of the above code in Scala REPL
res2: Array[Int] = Array(21, 43, 48, 33, 32, 48, 27, 25, 46, 32)
</code></pre>

<p>And similarly we can check the other methods as well.</p>

<pre><code>random.longs(size, min, max).toArray
res3: Array[Long] = Array(32, 44, 24, 34, 40, 29, 45, 24, 43, 30)

random.doubles(3, min, max).toArray
res4: Array[Double] = Array(38.10858166740068, 22.464983440394192, 43.64737980712431)
</code></pre>

<p>Fairly simple and no need to reinvent the wheel.<br />
Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK installation from ppa on Ubuntu]]></title>
    <link href="http://p7h.org/blog/2015/01/14/jdk-installation-ubuntu-ppa/"/>
    <updated>2015-01-14T17:04:15+00:00</updated>
    <id>http://p7h.org/blog/2015/01/14/jdk-installation-ubuntu-ppa</id>
    <content type="html"><![CDATA[<p>Previously I have <a href="/blog/2014/10/18/jdk-download-command-prompt/">written</a> how to install Oracle JDK on any env [Linux or Windows] from the command prompt.</p>

<p>But you can do that without even writing a single line of code or anything just by getting the JDK from the ppa on Ubuntu.
So, here are 3 very simple steps for installation of Oracle JDK on a Ubuntu machine.</p>

<!--more-->

<h4 id="initial-setup-command">Initial setup command</h4>
<pre><code>sudo apt-get install python-software-properties
</code></pre>

<h4 id="add-ppa-to-software-sources">Add ppa to software sources</h4>
<pre><code>sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
</code></pre>

<h4 id="for-oracle-jdk-6x">For Oracle JDK 6.x</h4>
<pre><code>sudo apt-get install oracle-java6-installer
</code></pre>

<h4 id="for-oracle-jdk-7x">For Oracle JDK 7.x</h4>
<pre><code>sudo apt-get install oracle-java7-installer
</code></pre>

<h4 id="for-oracle-jdk-8x">For Oracle JDK 8.x</h4>
<pre><code>sudo apt-get install oracle-java8-installer
</code></pre>

<h4 id="configure-the-env">Configure the env</h4>
<ul>
  <li>Add JAVA_HOME env variable.</li>
  <li>Also add JAVA_HOME/bin to PATH env variable.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download Java / JDK / JRE from shell / terminal / command prompt]]></title>
    <link href="http://p7h.org/blog/2014/10/18/jdk-download-command-prompt/"/>
    <updated>2014-10-18T00:00:00+01:00</updated>
    <id>http://p7h.org/blog/2014/10/18/jdk-download-command-prompt</id>
    <content type="html"><![CDATA[<p>Its been really sometime since I blogged anything. Got into too much work both on personal and professional fronts. I will try to be regular henceforth though, hopefully [fingers crossed!!].<br /></p>

<p>Most of my work happens on EC2 and on Linux as our Hadoop env is on EC2. I absolutely adore Linux and shell. And first and foremost thing I have to do - being a Java developer - is download Oracle JDK onto the Linux machines on EC2. And downloading Oracle JDK from Oracle website is difficult due to Oracle’s mandatory license check, which you need to accept before downloading the JDK. With my Linux env being server-only-machines [i.e. without a desktop or GUI], there is no way I could download the JDK directly from Oracle website. So, I came up with this small shell script [extending an <a href="http://stackoverflow.com/a/10959815" target="_blank">answer</a> from Stackoverflow] to download JDK from Oracle website from command prompt.<!--more--><br /></p>

<p>Depending on the OS and platform of the JDK version you intend to download, just modify the array on line#20 in the following script and you can trigger the download on the shell directly.
<div><script src='https://gist.github.com/9741922.js?file=jdk_download.sh'></script>
<noscript><pre><code>#####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####

### Shell script to download Oracle JDK / JRE / Java binaries from Oracle website using terminal / command / shell prompt using wget.
### You can download all the binaries one-shot by just giving the BASE_URL.
### Script might be useful if you need Oracle JDK on Amazon EC2 env.
### Script is updated for every JDK release.

### Features:-
# 1. Resumes a broken / interrupted [previous] download, if any.
# 2. Renames the file to a proper name with including platform info.
# 3. Downloads the following from Oracle Website with one shell invocation.
#    a. Windows 64 and 32 bit;
#    b. Linux 64 and 32 bit;
#    c. API Docs;
#    d. You can add more to the list of downloads are per your requirement.

#####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####

## Latest JDK8 version released on 19th April, 2016: JDK8u91
BASE_URL_8=http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91

## JDK_VERSION=${BASE_URL_8: -8}
JDK_VERSION=`echo $BASE_URL_8 | rev | cut -d &quot;/&quot; -f1 | rev`

declare -a PLATFORMS=(&quot;-windows-x64.exe&quot; &quot;-linux-x64.tar.gz&quot; &quot;-docs-all.zip&quot; &quot;-windows-i586.exe&quot; &quot;-linux-i586.tar.gz&quot;)

for platform in &quot;${PLATFORMS[@]}&quot;
do
    wget -c -O &quot;$JDK_VERSION$platform&quot; --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; &quot;${BASE_URL_8}${platform}&quot;
    ### curl -L -O -H &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; -k &quot;${BASE_URL_8}${platform}&quot;
done

#####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####   #####

## Earlier versions:
## v8u77 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u77-b03/jdk-8u77
## v8u73 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u73-b02/jdk-8u73
## v8u71 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u71-b15/jdk-8u71
## v8u65 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65
## v8u60 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jdk-8u60
## v8u51 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u51-b16/jdk-8u51
## v8u45 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u45-b14/jdk-8u45
## v8u40 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u40-b25/jdk-8u40
## v8u31 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u31-b13/jdk-8u31
## v8u25 =&gt; http://download.oracle.com/otn-pub/java/jdk/8u25-b17/jdk-8u25
</code></pre></noscript></div>
</p>

<p>Hope this script will be helpful for all those who live on and love command prompt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Guava -- Calibrating time using Stopwatch]]></title>
    <link href="http://p7h.org/blog/2014/01/29/guava-stopwatch/"/>
    <updated>2014-01-29T00:00:00+00:00</updated>
    <id>http://p7h.org/blog/2014/01/29/guava-stopwatch</id>
    <content type="html"><![CDATA[<p>Many of our day-to-day applications would need calibrating time taken between 2 points. In Java world we either depend on <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()" target="_blank"><code>System.currentTimeMillis()</code></a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#nanoTime()" target="_blank"><code>System.nanoTime()</code></a>. But the pain here is, we have to do the required computations of getting to a proper granularity to understand the time taken. Would n’t it be great it to have such an utility class which will give the required information in the granularity we need with minimum amount of boilerplate code?<br /><br /><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html" target="_blank"><code>Stopwatch</code></a> is one such small and wonderful utility class in Guava which helps in calibrating elapsed time / duration between any 2 points in the logic. The advantage of using Guava’s <code>Stopwatch</code> is you can get the elapsed time in any measure i.e. right from nanoseconds to days. This is possible because you can pass an enum argument type of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html" target="_blank"><code>TimeUnit</code></a> class to get the elapsed time in the desired granularity.
<!--more-->
Code snippet for the usage of the <code>Stopwatch</code> class:
<div><script src='https://gist.github.com/8691100.js'></script>
<noscript><pre><code>import java.util.Random;
import java.util.concurrent.TimeUnit;

import com.google.common.base.Stopwatch;

/**
 * Sample example demonstrating usage of Stopwatch API of Google Guava.
 *
 * @see &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html&quot;&gt;Guava Stopwatch&lt;/a&gt;
 */
public final class StopwatchExample {

	public final static void main(final String[] args) {
		//Effective Guava v15.0, this is the one way of creating a Stopwatch instance.
		final Stopwatch stopwatch = Stopwatch.createStarted();

		//Sleep for few random milliseconds.
		try {
			Thread.sleep(new Random().nextInt(1000));
		} catch (final InterruptedException interruptedException) {
			interruptedException.printStackTrace();
		}

		stopwatch.stop(); //optional

		System.out.println(&quot;Elapsed time ==&gt; &quot; + stopwatch);
		System.out.println(&quot;Elapsed time in Nanoseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.NANOSECONDS));
		System.out.println(&quot;Elapsed time in Microseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MICROSECONDS));
		System.out.println(&quot;Elapsed time in Milliseconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MILLISECONDS));
		//System.out.println(&quot;Elapsed time in Seconds ==&gt; &quot; + stopwatch.elapsed(TimeUnit.SECONDS));
		//System.out.println(&quot;Elapsed time in Minutes ==&gt; &quot; + stopwatch.elapsed(TimeUnit.MINUTES));
	}
}</code></pre></noscript></div>
</p>

<p>Few caveats for using <code>Stopwatch</code> are you should not start an already started <code>Stopwatch</code>. One has to check if the <code>Stopwatch</code> is already running by invoking <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Stopwatch.html#isRunning()" target="_blank"><code>isRunning()</code></a> method. <code>Stopwatch</code> documentation says the following on the same:<br />
&lt;blockquote class=&#8221;tr_bq&#8221; style=&#8221;background-color: white; box-sizing: border-box; color: #303030; font-size: 14px; line-height: 24px; margin-bottom: 15px;&#8221;&gt;Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.&lt;/blockquote&gt;
Also, once I got burned down by <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.2.1/org/apache/commons/lang3/time/StopWatch.html" target="_blank"><code>StopWatch</code></a> class of Apache Commons Lang. As I was working in an IDE on a Maven project, I could not quickly relate to the difference between <code>Stopwatch</code> of Guava and <code>StopWatch</code> of Apache Commons Lang, as the class got auto imported into the code and then spent some good 20 minutes trying to check my classpath, IDE setup, etc. Yes very silly mistake. So, please be careful in choosing the correct class.</p>
]]></content>
  </entry>
  
</feed>
